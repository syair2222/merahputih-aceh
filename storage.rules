
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Rules for pending registration files
    // Allows anyone to write (upload) if it's an image/pdf and under 5MB.
    // Allows any authenticated user to read.
    match /pending_registrations/{sessionId}/{fileName} {
      allow write: if request.resource.size < 5 * 1024 * 1024
                   && (request.resource.contentType.matches('image/.*') || request.resource.contentType.matches('application/pdf'))
                   && request.auth != null; // Or keep it more open if sessionId is truly unique and hard to guess for uploads
      allow read: if request.auth != null;
    }

    // Rules for member-specific files after registration
    // Example: /members/{userId}/profilePicture.jpg
    // Example: /members/{userId}/documents/ktp.pdf
    match /members/{userId}/{allPaths=**} {
      allow read: if request.auth.uid == userId
                  || (firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin_utama', 'sekertaris', 'bendahara', 'dinas']);
      allow write: if request.auth.uid == userId; // Only owner can write/update/delete their files
      // Add size and content type validation if needed, similar to pending_registrations
      // if request.resource.size < 5 * 1024 * 1024
      // && request.resource.contentType.matches('image/.*');
    }

    // Example placeholder for facility reports - adjust path and conditions as needed
    match /facility_reports/{userId}/{reportId}/{fileName} {
      allow read: if request.auth.uid == userId
                  || (firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in ['admin_utama', 'sekertaris', 'bendahara', 'dinas']);
      allow write: if request.auth.uid == userId
                   && request.resource.size < 10 * 1024 * 1024 // Example: 10MB limit for reports
                   && (request.resource.contentType.matches('image/.*') || request.resource.contentType.matches('application/pdf'));
    }

    // Default deny: Deny all other reads and writes by default for security
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
